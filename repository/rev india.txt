# JVM PYTHON IMPLEMENTATION

import sys, string, time
import itertools

inst_list = {'00': ('nop', '0'),
             '01': ('aconst_null', '0'),
             '02': ('iconst_m1', '0'),
             '03': ('iconst_0', '0'),
             '04': ('iconst_1', '0'),
             '05': ('iconst_2', '0'),
             '06': ('iconst_3', '0'),
             '07': ('iconst_4', '0'),
             '08': ('iconst_5', '0'),
             '09': ('lconst_0', '0'),
             '0a': ('lconst_1', '0'),
             '0b': ('fconst_0', '0'),
             '0c': ('fconst_1', '0'),
             '0d': ('fconst_2', '0'),
             '0e': ('dconst_0', '0'),
             '0f': ('dconst_1', '0'),
             '10': ('bipush', '1'),
             '11': ('sipush', '2'),
             '12': ('ldc', '1'),
             '13': ('ldc_w', '2'),
             '14': ('ldc2_w', '2'),
             '15': ('iload', '1'),
             '16': ('lload', '1'),
             '17': ('fload', '1'),
             '18': ('dload', '1'),
             '19': ('aload', '1'),
             '1a': ('iload_0', '0'),
             '1b': ('iload_1', '0'),
             '1c': ('iload_2', '0'),
             '1d': ('iload_3', '0'),
             '1e': ('lload_0', '0'),
             '1f': ('lload_1', '0'),
             '20': ('lload_2', '0'),
             '21': ('lload_3', '0'),
             '22': ('fload_0', '0'),
             '23': ('fload_1', '0'),
             '24': ('fload_2', '0'),
             '25': ('fload_3', '0'),
             '26': ('dload_0', '0'),
             '27': ('dload_1', '0'),
             '28': ('dload_2', '0'),
             '29': ('dload_3', '0'),
             '2a': ('aload_0', '0'),
             '2b': ('aload_1', '0'),
             '2c': ('aload_2', '0'),
             '2d': ('aload_3', '0'),
             '2e': ('iaload', '0'),
             '2f': ('laload', '0'),
             '30': ('faload', '0'),
             '31': ('daload', '0'),
             '32': ('aaload', '0'),
             '33': ('baload', '0'),
             '34': ('caload', '0'),
             '35': ('saload', '0'),
             '36': ('istore', '1'),
             '37': ('lstore', '1'),
             '38': ('fstore', '1'),
             '39': ('dstore', '1'),
             '3a': ('astore', '1'),
             '3b': ('istore_0', '0'),
             '3c': ('istore_1', '0'),
             '3d': ('istore_2', '0'),
             '3e': ('istore_3', '0'),
             '3f': ('lstore_0', '0'),
             '40': ('lstore_1', '0'),
             '41': ('lstore_2', '0'),
             '42': ('lstore_3', '0'),
             '43': ('fstore_0', '0'),
             '44': ('fstore_1', '0'),
             '45': ('fstore_2', '0'),
             '46': ('fstore_3', '0'),
             '47': ('dstore_0', '0'),
             '48': ('dstore_1', '0'),
             '49': ('dstore_2', '0'),
             '4a': ('dstore_3', '0'),
             '4b': ('astore_0', '0'),
             '4c': ('astore_1', '0'),
             '4d': ('astore_2', '0'),
             '4e': ('astore_3', '0'),
             '4f': ('iastore', '0'),
             '50': ('lastore', '0'),
             '51': ('fastore', '0'),
             '52': ('dastore', '0'),
             '53': ('aastore', '0'),
             '54': ('bastore', '0'),
             '55': ('castore', '0'),
             '56': ('sastore', '0'),
             '57': ('pop', '0'),
             '58': ('pop2', '0'),
             '59': ('dup', '0'),
             '5a': ('dup_x1', '0'),
             '5b': ('dup_x2', '0'),
             '5c': ('dup2', '0'),
             '5d': ('dup2_x1', '0'),
             '5e': ('dup2_x2', '0'),
             '5f': ('swap', '0'),
             '60': ('iadd', '0'),
             '61': ('ladd', '0'),
             '62': ('fadd', '0'),
             '63': ('dadd', '0'),
             '64': ('isub', '0'),
             '65': ('lsub', '0'),
             '66': ('fsub', '0'),
             '67': ('dsub', '0'),
             '68': ('imul', '0'),
             '69': ('lmul', '0'),
             '6a': ('fmul', '0'),
             '6b': ('dmul', '0'),
             '6c': ('idiv', '0'),
             '6d': ('ldiv', '0'),
             '6e': ('fdiv', '0'),
             '6f': ('ddiv', '0'),
             '70': ('irem', '0'),
             '71': ('lrem', '0'),
             '72': ('frem', '0'),
             '73': ('drem', '0'),
             '74': ('ineg', '0'),
             '75': ('lneg', '0'),
             '76': ('fneg', '0'),
             '77': ('dneg', '0'),
             '78': ('ishl', '0'),
             '79': ('lshl', '0'),
             '7a': ('ishr', '0'),
             '7b': ('lshr', '0'),
             '7c': ('iushr', '0'),
             '7d': ('lushr', '0'),
             '7e': ('iand', '0'),
             '7f': ('land', '0'),
             '80': ('ior', '0'),
             '81': ('lor', '0'),
             '82': ('ixor', '0'),
             '83': ('lxor', '0'),
             '84': ('iinc', '2'),
             '85': ('i2l', '0'),
             '86': ('i2f', '0'),
             '87': ('i2d', '0'),
             '88': ('l2i', '0'),
             '89': ('l2f', '0'),
             '8a': ('l2d', '0'),
             '8b': ('f2i', '0'),
             '8c': ('f2l', '0'),
             '8d': ('f2d', '0'),
             '8e': ('d2i', '0'),
             '8f': ('d2l', '0'),
             '90': ('d2f', '0'),
             '91': ('i2b', '0'),
             '92': ('i2c', '0'),
             '93': ('i2s', '0'),
             '94': ('lcmp', '0'),
             '95': ('fcmpl', '0'),
             '96': ('fcmpg', '0'),
             '97': ('dcmpl', '0'),
             '98': ('dcmpg', '0'),
             '99': ('ifeq', '2'),
             '9a': ('ifne', '2'),
             '9b': ('iflt', '2'),
             '9c': ('ifge', '2'),
             '9d': ('ifgt', '2'),
             '9e': ('ifle', '2'),
             '9f': ('if_icmpeq', '2'),
             'a0': ('if_icmpne', '2'),
             'a1': ('if_icmplt', '2'),
             'a2': ('if_icmpge', '2'),
             'a3': ('if_icmpgt', '2'),
             'a4': ('if_icmple', '2'),
             'a5': ('if_acmpeq', '2'),
             'a6': ('if_acmpne', '2'),
             'a7': ('goto', '2'),
             'a8': ('jsr', '2'),
             'a9': ('ret', '1'),
             'aa': ('tableswitch', '4+'),
             'ab': ('lookupswitch', '4+'),
             'ac': ('ireturn', '0'),
             'ad': ('lreturn', '0'),
             'ae': ('freturn', '0'),
             'af': ('dreturn', '0'),
             'b0': ('areturn', '0'),
             'b1': ('return', '0'),
             }
def POP(reg):
    global stack_size, stack, local_var, stack_pointer
    print 'POP'
    local_var[reg] = stack[stack_pointer]
    for x in range(0,stack_size-1):
        #print 'x:', x
        stack[x] = stack[x+1]
        #print 'stack', stack

def PUSH(reg):
    global stack, stack_size, local_var, stack_pointer
    print 'PUSH'
    for x in range(0,stack_size-1):
        stack[stack_size-x-1] = stack[stack_size-x]
        print 'stack', stack
    stack[stack_pointer] = local_var[reg]

def ALU_op(op):
    global stack, stack_size, local_var, stack_pointer
    print 'ALU OPERATION',
    reg_A = stack[stack_pointer]
    reg_B = stack[stack_pointer-1]
    if op == 1:
        print 'ADD'
        result = reg_A + reg_B
    elif op == 2:
        result = reg_A - reg_B
    elif op == 3:
        result = reg_A + reg_B
    elif op ==4:
        result = reg_A + reg_B
    stack[stack_pointer-1] = result
    stack_pointer -= 1
    

def get_method_info(filename):
    global stack_size, method_area, local_size
    file = open(filename, 'r')
    lines = file.readlines()
    for x in range(len(lines)):
        line = lines[x].rstrip('\n')
        inst = string.split(line)
        print inst
        if line == "code":
            _method_area = lines[x+1]
            method_area = [i+j for i, j in zip(_method_area[::2], _method_area[1::2])]
            print method_area
            print 'len of bytecode:', len(method_area)
        elif inst[0] == 'stack':
            stack_size = int(inst[2])
        elif inst[0] == 'locals':
            local_size = int(inst[2])

if __name__ == "__main__":
    filename = sys.argv[1]
    line_num = 1
    method_area = []
    stack_size = 0
    get_method_info(filename)
    stack = [0] * stack_size
    local_var = [0] * local_size
    PC = 0
    stack_pointer = 0
    #for i in range(0, len(method_area)):
    while PC < len(method_area):
    #while method_area[PC] != None:
        if method_area[PC] in inst_list:
            print ''
            print 'stack', stack,
            print 'locals', local_var
            print line_num, '::', method_area[PC], ':',
            print inst_list[method_area[PC]][0],
            if method_area[PC] == '03':
                PUSH()
                stack[0] = 0
            elif method_area[PC] == '07':
                stack[1] = stack[0]
                stack[0] = 4
            elif method_area[PC] == '06':
                stack[1] = stack[0]
                stack[0] = 3
            elif method_area[PC] == '36':
                no_of_operands = int(inst_list[method_area[PC]][1])
                PC += 1
                print 'no of operands:', no_of_operands, '->', int(method_area[PC]),
                local_var[int(method_area[PC])] = stack[0]
            elif method_area[PC] == '3c':
                local_var[1] = stack[0]
                POP()
            elif method_area[PC] == '3d':
                local_var[2] = stack[0]
            elif method_area[PC] == '3e':
                local_var
            elif method_area[PC] == '59':
                stack[1] = stack[0]

            no_of_operands = int(inst_list[method_area[PC]][1])
            if no_of_operands > 0:
                for m in range(1, no_of_operands+1):
                    PC += 1
                    print '->', 'operand', m, ':', method_area[PC],
            line_num += 1

            PC += 1
        else:
            print 'byte code not found'

