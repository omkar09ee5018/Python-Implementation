# JVM PYTHON IMPLEMENTATION

import sys, string, time

inst_list = {'00': ('nop', '0'),
             '01': ('aconst_null', '0'),
             '02': ('iconst_m1', '0'),
             '03': ('iconst_0', '0'),
             '04': ('iconst_1', '0'),
             '05': ('iconst_2', '0'),
             '06': ('iconst_3', '0'),
             '07': ('iconst_4', '0'),
             '08': ('iconst_5', '0'),
             '09': ('lconst_0', '0'),
             '0a': ('lconst_1', '0'),
             '0b': ('fconst_0', '0'),
             '0c': ('fconst_1', '0'),
             '0d': ('fconst_2', '0'),
             '0e': ('dconst_0', '0'),
             '0f': ('dconst_1', '0'),
             '10': ('bipush', '1'),
             '11': ('sipush', '2'),
             '12': ('ldc', '1'),
             '13': ('ldc_w', '2'),
             '14': ('ldc2_w', '2'),
             '15': ('iload', '1'),
             '16': ('lload', '1'),
             '17': ('fload', '1'),
             '18': ('dload', '1'),
             '19': ('aload', '1'),
             '1a': ('iload_0', '0'),
             '1b': ('iload_1', '0'),
             '1c': ('iload_2', '0'),
             '1d': ('iload_3', '0'),
             '1e': ('lload_0', '0'),
             '1f': ('lload_1', '0'),
             '20': ('lload_2', '0'),
             '21': ('lload_3', '0'),
             '22': ('fload_0', '0'),
             '23': ('fload_1', '0'),
             '24': ('fload_2', '0'),
             '25': ('fload_3', '0'),
             '26': ('dload_0', '0'),
             '27': ('dload_1', '0'),
             '28': ('dload_2', '0'),
             '29': ('dload_3', '0'),
             '2a': ('aload_0', '0'),
             '2b': ('aload_1', '0'),
             '2c': ('aload_2', '0'),
             '2d': ('aload_3', '0'),
             '2e': ('iaload', '0'),
             '2f': ('laload', '0'),
             '30': ('faload', '0'),
             '31': ('daload', '0'),
             '32': ('aaload', '0'),
             '33': ('baload', '0'),
             '34': ('caload', '0'),
             '35': ('saload', '0'),
             '36': ('istore', '1'),
             '37': ('lstore', '1'),
             '38': ('fstore', '1'),
             '39': ('dstore', '1'),
             '3a': ('astore', '1'),
             '3b': ('istore_0', '0'),
             '3c': ('istore_1', '0'),
             '3d': ('istore_2', '0'),
             '3e': ('istore_3', '0'),
             '3f': ('lstore_0', '0'),
             '40': ('lstore_1', '0'),
             '41': ('lstore_2', '0'),
             '42': ('lstore_3', '0'),
             '43': ('fstore_0', '0'),
             '44': ('fstore_1', '0'),
             '45': ('fstore_2', '0'),
             '46': ('fstore_3', '0'),
             '47': ('dstore_0', '0'),
             '48': ('dstore_1', '0'),
             '49': ('dstore_2', '0'),
             '4a': ('dstore_3', '0'),
             '4b': ('astore_0', '0'),
             '4c': ('astore_1', '0'),
             '4d': ('astore_2', '0'),
             '4e': ('astore_3', '0'),
             '4f': ('iastore', '0'),
             '50': ('lastore', '0'),
             '51': ('fastore', '0'),
             '52': ('dastore', '0'),
             '53': ('aastore', '0'),
             '54': ('bastore', '0'),
             '55': ('castore', '0'),
             '56': ('sastore', '0'),
             '57': ('pop', '0'),
             '58': ('pop2', '0'),
             '59': ('dup', '0'),
             '5a': ('dup_x1', '0'),
             '5b': ('dup_x2', '0'),
             '5c': ('dup2', '0'),
             '5d': ('dup2_x1', '0'),
             '5e': ('dup2_x2', '0'),
             '5f': ('swap', '0'),
             '60': ('iadd', '0'),
             '61': ('ladd', '0'),
             '62': ('fadd', '0'),
             '63': ('dadd', '0'),
             '64': ('isub', '0'),
             '65': ('lsub', '0'),
             '66': ('fsub', '0'),
             '67': ('dsub', '0'),
             '68': ('imul', '0'),
             '69': ('lmul', '0'),
             '6a': ('fmul', '0'),
             '6b': ('dmul', '0'),
             '6c': ('idiv', '0'),
             '6d': ('ldiv', '0'),
             '6e': ('fdiv', '0'),
             '6f': ('ddiv', '0'),
             '70': ('irem', '0'),
             '71': ('lrem', '0'),
             '72': ('frem', '0'),
             '73': ('drem', '0'),
             '74': ('ineg', '0'),
             '75': ('lneg', '0'),
             '76': ('fneg', '0'),
             '77': ('dneg', '0'),
             '78': ('ishl', '0'),
             '79': ('lshl', '0'),
             '7a': ('ishr', '0'),
             '7b': ('lshr', '0'),
             '7c': ('iushr', '0'),
             '7d': ('lushr', '0'),
             '7e': ('iand', '0'),
             '7f': ('land', '0'),
             '80': ('ior', '0'),
             '81': ('lor', '0'),
             '82': ('ixor', '0'),
             '83': ('lxor', '0'),
             '84': ('iinc', '2'),
             '85': ('i2l', '0'),
             '86': ('i2f', '0'),
             '87': ('i2d', '0'),
             '88': ('l2i', '0'),
             '89': ('l2f', '0'),
             '8a': ('l2d', '0'),
             '8b': ('f2i', '0'),
             '8c': ('f2l', '0'),
             '8d': ('f2d', '0'),
             '8e': ('d2i', '0'),
             '8f': ('d2l', '0'),
             '90': ('d2f', '0'),
             '91': ('i2b', '0'),
             '92': ('i2c', '0'),
             '93': ('i2s', '0'),
             '94': ('lcmp', '0'),
             '95': ('fcmpl', '0'),
             '96': ('fcmpg', '0'),
             '97': ('dcmpl', '0'),
             '98': ('dcmpg', '0'),
             '99': ('ifeq', '2'),
             '9a': ('ifne', '2'),
             '9b': ('iflt', '2'),
             '9c': ('ifge', '2'),
             '9d': ('ifgt', '2'),
             '9e': ('ifle', '2'),
             '9f': ('if_icmpeq', '2'),
             'a0': ('if_icmpne', '2'),
             'a1': ('if_icmplt', '2'),
             'a2': ('if_icmpge', '2'),
             'a3': ('if_icmpgt', '2'),
             'a4': ('if_icmple', '2'),
             'a5': ('if_acmpeq', '2'),
             'a6': ('if_acmpne', '2'),
             'a7': ('goto', '2'),
             'a8': ('jsr', '2'),
             'a9': ('ret', '1'),
             'aa': ('tableswitch', '4+'),
             'ab': ('lookupswitch', '4+'),
             'ac': ('ireturn', '0'),
             'ad': ('lreturn', '0'),
             'ae': ('freturn', '0'),
             'af': ('dreturn', '0'),
             'b0': ('areturn', '0'),
             'b1': ('return', '0'),
             }
line_num = 1
for line in open("add.asm", 'r').readlines():
    line = line.rstrip('\n')
    inst = string.split(line)
    if inst[0] in inst_list:
        print line_num, ':', inst_list[inst[0]][0],
        no_of_operand = len(inst)
        if no_of_operand > 1:
            for x in range(1, no_of_operand):
                print 'operand', x, ':', inst[x],
        line_num += 1
        print ''
    elif inst[0] == 'end':
        print 'End of Bytecode'
    else:
        print 'bytecode not found'
        line_num += 1
