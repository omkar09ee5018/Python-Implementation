# JVM PYTHON IMPLEMENTATION

import sys, string, time
import numpy as np
import itertools

inst_list = {'00': ('nop', '0'),
             '01': ('aconst_null', '0'),
             '02': ('iconst_m1', '0'),
             '03': ('iconst_0', '0'),
             '04': ('iconst_1', '0'),
             '05': ('iconst_2', '0'),
             '06': ('iconst_3', '0'),
             '07': ('iconst_4', '0'),
             '08': ('iconst_5', '0'),
             '09': ('lconst_0', '0'),
             '0a': ('lconst_1', '0'),
             #'0b': ('fconst_0', '0'),
             #'0c': ('fconst_1', '0'),
             #'0d': ('fconst_2', '0'),
             #'0e': ('dconst_0', '0'),
             #'0f': ('dconst_1', '0'),
             '10': ('bipush', '1'),
             '11': ('sipush', '2'),
             '12': ('ldc', '1'),
             '13': ('ldc_w', '2'),
             '14': ('ldc2_w', '2'),
             '15': ('iload', '1'),
             '16': ('lload', '1'),
             #'17': ('fload', '1'),
             #'18': ('dload', '1'),
             '19': ('aload', '1'),
             '1a': ('iload_0', '0'),
             '1b': ('iload_1', '0'),
             '1c': ('iload_2', '0'),
             '1d': ('iload_3', '0'),
             '1e': ('lload_0', '0'),
             '1f': ('lload_1', '0'),
             '20': ('lload_2', '0'),
             '21': ('lload_3', '0'),
             #'22': ('fload_0', '0'),
             #'23': ('fload_1', '0'),
             #'24': ('fload_2', '0'),
             #'25': ('fload_3', '0'),
             #'26': ('dload_0', '0'),
             #'27': ('dload_1', '0'),
             #'28': ('dload_2', '0'),
             #'29': ('dload_3', '0'),
             '2a': ('aload_0', '0'),
             '2b': ('aload_1', '0'),
             '2c': ('aload_2', '0'),
             '2d': ('aload_3', '0'),
             '2e': ('iaload', '0'),
             '2f': ('laload', '0'),
             '30': ('faload', '0'),
             '31': ('daload', '0'),
             '32': ('aaload', '0'),
             '33': ('baload', '0'),
             '34': ('caload', '0'),
             '35': ('saload', '0'),
             '36': ('istore', '1'),
             '37': ('lstore', '1'),
             #'38': ('fstore', '1'),
             #'39': ('dstore', '1'),
             '3a': ('astore', '1'),
             '3b': ('istore_0', '0'),
             '3c': ('istore_1', '0'),
             '3d': ('istore_2', '0'),
             '3e': ('istore_3', '0'),
             '3f': ('lstore_0', '0'),
             '40': ('lstore_1', '0'),
             '41': ('lstore_2', '0'),
             '42': ('lstore_3', '0'),
             #'43': ('fstore_0', '0'),
             #'44': ('fstore_1', '0'),
             #'45': ('fstore_2', '0'),
             #'46': ('fstore_3', '0'),
             #'47': ('dstore_0', '0'),
             #'48': ('dstore_1', '0'),
             #'49': ('dstore_2', '0'),
             #'4a': ('dstore_3', '0'),
             '4b': ('astore_0', '0'),
             '4c': ('astore_1', '0'),
             '4d': ('astore_2', '0'),
             '4e': ('astore_3', '0'),
             '4f': ('iastore', '0'),
             '50': ('lastore', '0'),
             #'51': ('fastore', '0'),
             #'52': ('dastore', '0'),
             '53': ('aastore', '0'),
             '54': ('bastore', '0'),
             '55': ('castore', '0'),
             '56': ('sastore', '0'),
             '57': ('pop', '0'),
             '58': ('pop2', '0'),
             '59': ('dup', '0'),
             '5a': ('dup_x1', '0'),
             '5b': ('dup_x2', '0'),
             '5c': ('dup2', '0'),
             '5d': ('dup2_x1', '0'),
             '5e': ('dup2_x2', '0'),
             '5f': ('swap', '0'),
             '60': ('iadd', '0'),
             '61': ('ladd', '0'),
             #'62': ('fadd', '0'),
             '63': ('dadd', '0'),
             '64': ('isub', '0'),
             '65': ('lsub', '0'),
             #'66': ('fsub', '0'),
             #'67': ('dsub', '0'),
             '68': ('imul', '0'),
             '69': ('lmul', '0'),
             #'6a': ('fmul', '0'),
             #'6b': ('dmul', '0'),
             '6c': ('idiv', '0'),
             '6d': ('ldiv', '0'),
             #'6e': ('fdiv', '0'),
             #'6f': ('ddiv', '0'),
             '70': ('irem', '0'),
             '71': ('lrem', '0'),
             #'72': ('frem', '0'),
             #'73': ('drem', '0'),
             '74': ('ineg', '0'),
             '75': ('lneg', '0'),
             #'76': ('fneg', '0'),
             #'77': ('dneg', '0'),
             '78': ('ishl', '0'),
             '79': ('lshl', '0'),
             '7a': ('ishr', '0'),
             '7b': ('lshr', '0'),
             '7c': ('iushr', '0'),
             '7d': ('lushr', '0'),
             '7e': ('iand', '0'),
             '7f': ('land', '0'),
             '80': ('ior', '0'),
             '81': ('lor', '0'),
             '82': ('ixor', '0'),
             '83': ('lxor', '0'),
             '84': ('iinc', '2'),
             '85': ('i2l', '0'),
             #'86': ('i2f', '0'),
             #'87': ('i2d', '0'),
             '88': ('l2i', '0'),
             #'89': ('l2f', '0'),
             #'8a': ('l2d', '0'),
             #'8b': ('f2i', '0'),
             #'8c': ('f2l', '0'),
             #'8d': ('f2d', '0'),
             #'8e': ('d2i', '0'),
             #'8f': ('d2l', '0'),
             #'90': ('d2f', '0'),
             '91': ('i2b', '0'),
             '92': ('i2c', '0'),
             '93': ('i2s', '0'),
             '94': ('lcmp', '0'),
             #'95': ('fcmpl', '0'),
             #'96': ('fcmpg', '0'),
             '97': ('dcmpl', '0'),
             '98': ('dcmpg', '0'),
             '99': ('ifeq', '2'),
             '9a': ('ifne', '2'),
             '9b': ('iflt', '2'),
             '9c': ('ifge', '2'),
             '9d': ('ifgt', '2'),
             '9e': ('ifle', '2'),
             '9f': ('if_icmpeq', '2'),
             'a0': ('if_icmpne', '2'),
             'a1': ('if_icmplt', '2'),
             'a2': ('if_icmpge', '2'),
             'a3': ('if_icmpgt', '2'),
             'a4': ('if_icmple', '2'),
             'a5': ('if_acmpeq', '2'),
             'a6': ('if_acmpne', '2'),
             'a7': ('goto', '2'),
             'a8': ('jsr', '2'),
             'a9': ('ret', '1'),
             'aa': ('tableswitch', '4+'),
             'ab': ('lookupswitch', '4+'),
             'ac': ('ireturn', '0'),
             'ad': ('lreturn', '0'),
             #'ae': ('freturn', '0'),
             #'af': ('dreturn', '0'),
             'b0': ('areturn', '0'),
             'b1': ('return', '0'),
             }

# programming stack pointer as pre-decrement for POP and post-increment for PUSH
# PC is incremented at the end of each instruction i.e. after instruction has been committed (when pipelined)
# value, result is a temp register not visible to programmers


# how to keep track that number pushed onto the stack is a int, double, long, float etc???
# does the JVM handle this internally in the bytecode?
# what to do about objects? (how to implement heap)?


def readmem(address):
    global memory
    # read memory needs only address lines and data is returned
    print 'read mem'
    return memory[address]

def writemem(address, value):
    global memory
    # write memory needs both address and data
    print 'write mem'
    memory[address] = value

def POP():
    global stack_size, stack, local_var, stack_pointer, memory, local_var_ptr
    print 'POP'
    # add sanity checks
    stack_pointer -= 1
    return readmem(stack_pointer)

def POP2():
    global stack_size, stack, local_var, stack_pointer, memory, local_var_ptr, reg_A, reg_B
    reg_A = POP()       # tos
    reg_B = POP()       # tos-1

def PUSH(value):
    global stack, stack_size, local_var, stack_pointer, memory, local_var_ptr
    print 'PUSH'
    # add sanity checks
    writemem(stack_pointer, value)
    stack_pointer += 1


def DUP():
    global stack, stack_size, local_var, stack_pointer, memory, local_var_ptr
    value = readmem(stack_pointer - 1)
    writemem(stack_pointer, value)
    #memory[stack_pointer] = memory[stack_pointer-1]
    stack_pointer += 1

def ALU_op(op):
    global stack, stack_size, local_var, stack_pointer, method_area, reg_A, reg_B, memory, local_var_ptr
    print 'ALU OPERATION',
    # pop TOS & TOS-1
    reg_B = POP()
    reg_A = POP()

    if op == 1:
        print 'ADD'
        result_ALU = reg_A + reg_B
    elif op == 2:
        print 'SUB'
        result_ALU = reg_A - reg_B
    elif op == 3:
        print 'AND'
        result_ALU = reg_A & reg_B
    elif op == 4:
        print 'OR'
        result_ALU = reg_A | reg_B
    elif op == 5:       # left shift
        result_ALU = reg_B << shift
    # push result onto stack
    #stack[stack_pointer] = result_ALU
    writemem(stack_pointer, result_ALU)
    stack_pointer += 1

def compare(type):
    global stack, stack_size, local_var, stack_pointer, method_area, PC, memory, local_var_ptr

    #pop TOS & TOS-1

    reg_B = POP()
    reg_A = POP()
    result = 0

    #compare
    if type == 1:
        result = (reg_A == reg_B)   # eq
    elif type == 2:
        result = (reg_A != reg_B)   # ne
    elif type == 3:
        result = (reg_A < reg_B)   # lt
    elif type == 6:
        result = (reg_A <= reg_B)   # le
    elif type == 4:
        result = (reg_A >= reg_B)   # gt
    elif type == 5:
        result = (reg_A > reg_B)   # ge

    if result:          #if true
        offset = OFFSET()
        JUMP(offset)
    else:
        PC += 2

def INC():
    global stack, stack_size, local_var, stack_pointer, method_area, PC, memory, local_var_ptr
    # reprogram using alu_operation(add)
    # push local variable onto the stack
    # add 1 to stack might need extra space on the stack to implement
    print 'inc'
    reg = int(method_area[PC+1])
    reg_A = int(memory[local_var_ptr+reg])
    PC += 1
    reg_A += int(method_area[PC+1])
    memory[local_var_ptr+reg] = reg_A
    PC += 1

def OFFSET():
    global stack, stack_size, local_var, stack_pointer, method_area, PC, memory, local_var_ptr
    # reg_A = int(method_area[PC+1], 16)
    reg_A = int(readmem(PC+1), 16)
    # reg_B = int(method_area[PC+2], 16)
    reg_B = int(readmem(PC+2), 16)
    # limit int to two bytes
    reg_A = reg_A << 8
    offset = reg_A | reg_B
    return offset

def JUMP(offset):
    global stack, stack_size, local_var, stack_pointer, method_area, PC, memory, local_var_ptr

    if offset & 0b1000000000000000:
        offset = 65536 - offset
        PC = PC - offset
    else:
        PC = PC + offset
    PC = PC- 1

def get_method_info(filename):
    global stack_size, method_area, local_size, memory, local_var_ptr
    file = open(filename, 'r')
    lines = file.readlines()
    for x in range(len(lines)):
        line = lines[x].rstrip('\n')
        inst = string.split(line)
        print inst
        if line == "code":
            _method_area = lines[x+1]
            method_area = [i+j for i, j in zip(_method_area[::2], _method_area[1::2])]
            print method_area
            print 'len of bytecode:', len(method_area)
        elif inst[0] == 'stack':
            stack_size = int(inst[2])
        elif inst[0] == 'locals':
            local_size = int(inst[2])

if __name__ == "__main__":
    filename = sys.argv[1]
    line_num = 1
    method_area = []
    stack_size = 0
    get_method_info(filename)
    stack = [0] * stack_size
    local_var = [0] * local_size
    PC = 0
    reg_A = 0
    reg_B = 0
    cmp_a = 0
    cmp_b = 0
    stack_pointer = 0
    shift = 0
    #for x in range(0, len(method_area)):
        #method_area[x] = int(method_area[x], 16)
    #print method_area
    stack_pointer = len(method_area) + local_size
    local_var_ptr = len(method_area)
    memory = method_area + local_var + stack
    print memory

    while PC <= len(method_area):
        # instruction fetch
        print ''
        inst_reg = readmem(PC)
        # decode & execute
        if inst_reg in inst_list:
            print 'MEMORY:', memory
            print line_num, '::', inst_reg, ':',
            print inst_list[inst_reg][0],
            if inst_reg == '00':
                print 'NOP'
            elif inst_reg == '01':   # aconst_null
                PUSH(0b000000000)
            elif inst_reg == '02':    # iconst_-1
                PUSH(-1)
            elif inst_reg == '03':    # iconst_0
                PUSH(0)
            elif inst_reg == '04':    # iconst_1
                PUSH(1)
            elif inst_reg == '05':    # iconst_2
                PUSH(2)
            elif inst_reg == '06':    # iconst_3
                PUSH(3)
            elif inst_reg == '07':   # iconst_4
                PUSH(4)
            elif inst_reg == '08':   # iconst_5
                PUSH(5)
            elif inst_reg == '09':   # lconst_0
                PUSH(0)
                PUSH(0)
            elif inst_reg == '0a':   # lconst_1
                # big-endian config
                PUSH(1)
                PUSH(0)
            elif inst_reg == '10':    # bipush
                PC += 1
                PUSH(readmem(PC))
            elif inst_reg == '11':      # sipush
                print 'call offset here'

            elif inst_reg == '15':     # iload + 1 operand
                reg = int(method_area[PC+1])
                PUSH(memory[local_var_ptr+reg])
                PC += 1
            elif inst_reg == '1b':    #iload_1
                PUSH(memory[local_var_ptr+1])
            elif inst_reg == '1c':    #iload_2
                PUSH(memory[local_var_ptr+2])
            elif inst_reg == '1d':    #iload_3
                PUSH(memory[local_var_ptr+3])
            elif inst_reg == '36':   # istore + 1 operand
                reg = int(method_area[PC+1])
                value = POP()
                writemem(local_var_ptr+reg, value)
                PC += 1
            elif inst_reg == '3c':   # istore_1
                value = POP()
                writemem(local_var_ptr+1, value)
            elif inst_reg == '3d':   # istore_2
                value = POP()
                writemem(local_var_ptr+2, value)
            elif inst_reg == '3e':   # istore_3
                value = POP()
                writemem(local_var_ptr+3, value)
            elif inst_reg == '57':      # pop
                stack_pointer -= 1
            elif inst_reg == '58':      # pop_2
                stack_pointer -= 2
            elif inst_reg == '59':   # dup
                DUP()
            elif inst_reg == '5a':      # dup_x1
                POP2()
                PUSH(reg_A)
                PUSH(reg_B)
                PUSH(reg_A)
            elif inst_reg == '5b':      # dup_x2
                print 'two types possible, need to handle'
            elif inst_reg == '5c':      # dup2
                POP2()
                PUSH(reg_A)
                PUSH(reg_B)
                PUSH(reg_A)
                PUSH(reg_B)
            elif inst_reg == '5d':
                print 'two types possible, need to handle'
            elif inst_reg == '5e':
                print 'two types possible, need to handle'
            elif inst_reg == '60':   # iadd
                ALU_op(1)
            elif inst_reg == '64':   # isub
                ALU_op(2)
            elif inst_reg == '84':   # iinc + 2 operands
                INC()
            elif inst_reg == '9f':    # if_icmpeq + 2 operands (equal to)
                compare(1)

            elif inst_reg == 'a0':    # if_icmpne + 2 operands (not equal to)
                compare(2)

            elif inst_reg == 'a1':    # if_icmplt + 2 operands (less then)
                compare(3)

            elif inst_reg == 'a2':    # if_icmpge + 2 operands (greater than or equal to)
                compare(4)

            elif inst_reg == 'a3':    # if_icmpgt + 2 operands (greater than)
                compare(5)

            elif inst_reg == 'a4':    # if_icmple + 2 operands (less then or equal to)
                compare(6)

            elif inst_reg == 'a7':    # goto + 2 operands
                offset = OFFSET()
                JUMP(offset)

                print "-----------------------------------------------------------------"
            elif inst_reg == 'b1':    # return
                print 'MEMORY:',
                print memory
                exit()
            #no_of_operands = int(inst_list[memory[PC]][1])
            #if no_of_operands > 0:
                #for m in range(1, no_of_operands+1):
                    #PC += 1
                    #print '->', 'operand', m, ':', memory[PC],
            line_num += 1

            PC += 1
            print 'PC:', PC
        else:
            #exit()
            print 'byte code not found'

